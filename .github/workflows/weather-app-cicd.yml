name: Weather App CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

env:
  DOTNET_VERSION: '8.0.x'
  RESOURCE_GROUP: 'weather-app-rg'
  LOCATION: 'uksouth'
  NAME_PREFIX: 'weather'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore CopilotExercises/CopilotExercises.sln
      
    - name: Build solution
      run: dotnet build CopilotExercises/CopilotExercises.sln --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test CopilotExercises/CopilotExercises.sln --configuration Release --no-build --verbosity normal
      
    - name: Publish Backend
      run: dotnet publish CopilotExercises/Backend/Backend.csproj -c Release -o publish/backend
      
    - name: Publish BlazorUI
      run: dotnet publish CopilotExercises/BlazorUI/BlazorUI.csproj -c Release -o publish/blazorui
      
    - name: Upload Backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend
        path: publish/backend
        
    - name: Upload BlazorUI artifact
      uses: actions/upload-artifact@v3
      with:
        name: blazorui
        path: publish/blazorui

  build-and-push-images:
    name: Build and Push Docker Images
    needs: build-and-test
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set environment
      id: set-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        fi
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set up Azure CLI
      uses: azure/cli@v1.0.7
      with:
        inlineScript: |
          # Create resource group if it doesn't exist
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          
          # Deploy the bicep template
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file CopilotExercises/infrastructure/main.bicep \
            --parameters environmentName=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }} namePrefix=${{ env.NAME_PREFIX }}
          
          # Get the ACR login server
          ACR_LOGIN_SERVER=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --name main --query "properties.outputs.containerRegistryLoginServer.value" -o tsv)
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: CopilotExercises/Backend
        push: true
        tags: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}, ${{ env.ACR_LOGIN_SERVER }}/backend:latest
        file: CopilotExercises/Backend/Dockerfile
        
    - name: Build and push BlazorUI Docker image
      uses: docker/build-push-action@v4
      with:
        context: CopilotExercises
        push: true
        tags: ${{ env.ACR_LOGIN_SERVER }}/blazorui:${{ github.sha }}, ${{ env.ACR_LOGIN_SERVER }}/blazorui:latest
        file: CopilotExercises/BlazorUI/Dockerfile.standalone

  deploy:
    name: Deploy to Azure
    needs: build-and-push-images
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set environment
      id: set-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        fi
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy app to Azure
      uses: azure/cli@v1.0.7
      with:
        inlineScript: |
          # Get the deployment outputs
          BACKEND_URL=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --name main --query "properties.outputs.backendApiUrl.value" -o tsv)
          FRONTEND_URL=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --name main --query "properties.outputs.frontendAppUrl.value" -o tsv)
          ACR_LOGIN_SERVER=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --name main --query "properties.outputs.containerRegistryLoginServer.value" -o tsv)
          
          # Update container apps to use the latest images
          az containerapp update \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name backend \
            --image $ACR_LOGIN_SERVER/backend:${{ github.sha }}
            
          az containerapp update \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name blazorui \
            --image $ACR_LOGIN_SERVER/blazorui:${{ github.sha }}
          
          echo "Deployment completed successfully!"
          echo "Backend API URL: $BACKEND_URL"
          echo "Frontend App URL: $FRONTEND_URL"