@page "/weather"

@using Backend

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@inject HttpClient Http

@code {
    private WeatherForecast[]? forecasts;

    // Property for testing purposes
    [Parameter]
    public WeatherForecast[]? ForecastsForTest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // If test forecasts are provided, use them instead of making an HTTP request
        if (ForecastsForTest != null)
        {
            forecasts = ForecastsForTest;
            return;
        }

        // Otherwise, make the actual HTTP request
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
}
